name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 推送标签时触发发布
  workflow_dispatch:  # 手动触发

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }
        pip install pyinstaller

    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name TimeNest --icon assets/logo.ico main.py

    - name: Create Windows package
      shell: bash
      run: |
        mkdir -p TimeNest-windows
        cp dist/TimeNest.exe TimeNest-windows/
        cp README.md TimeNest-windows/ 2>/dev/null || echo "No README.md file"
        cp LICENSE TimeNest-windows/ 2>/dev/null || echo "No LICENSE file"
        cp start.bat TimeNest-windows/
        cp start.sh TimeNest-windows/ 2>/dev/null || echo "No start.sh file"
        
        # 创建ZIP包
        7z a TimeNest-windows.zip TimeNest-windows/

    - name: Get version
      id: get_version
      run: |
        $version = "${{ github.ref_name }}"
        $version = $version -replace '^v', ''
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Upload Windows release asset
      uses: softprops/action-gh-release@v1
      with:
        files: TimeNest-windows.zip
        tag_name: ${{ github.ref_name }}

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 包含主要的Linux发行版系列
        distro: [ubuntu, debian, fedora, centos, arch]
        arch: [x86_64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install pyinstaller

    - name: Build Linux executable
      run: |
        pyinstaller --onefile --windowed --name TimeNest main.py

    - name: Create Linux package based on distro
      shell: bash
      run: |
        DISTRO=${{ matrix.distro }}
        VERSION=${GITHUB_REF_NAME#v}
        
        mkdir -p TimeNest-linux-${DISTRO}
        cp dist/TimeNest TimeNest-linux-${DISTRO}/
        cp README.md TimeNest-linux-${DISTRO}/ 2>/dev/null || echo "No README.md file"
        cp LICENSE TimeNest-linux-${DISTRO}/ 2>/dev/null || echo "No LICENSE file"
        cp start.sh TimeNest-linux-${DISTRO}/
        
        # 根据不同的发行版创建相应的包
        case $DISTRO in
          ubuntu|debian)
            # 创建DEB包结构
            mkdir -p timenest-debian/DEBIAN
            mkdir -p timenest-debian/usr/bin
            mkdir -p timenest-debian/usr/share/doc/timenest
            
            cp TimeNest-linux-${DISTRO}/TimeNest timenest-debian/usr/bin/
            cp TimeNest-linux-${DISTRO}/README.md timenest-debian/usr/share/doc/timenest/ 2>/dev/null || echo "No README.md file"
            
            # 创建控制文件
            cat > timenest-debian/DEBIAN/control << 'EOF'
Package: timenest
Version: $VERSION
Section: utils
Priority: optional
Architecture: amd64
Depends: python3, python3-pyside6
Maintainer: TimeNest Team
Description: 智能课程表桌面应用
 Complete rewrite of ClassIsland project using Python and PySide6 framework
EOF
            
            # 构建DEB包
            dpkg-deb --build timenest-debian TimeNest-${VERSION}-linux-${DISTRO}.deb 2>/dev/null || echo "Warning: dpkg-deb failed"
            if command -v zip >/dev/null 2>&1; then
              zip TimeNest-${VERSION}-linux-${DISTRO}.deb.zip TimeNest-${VERSION}-linux-${DISTRO}.deb 2>/dev/null || echo "Warning: zip failed"
            fi
            ;;
            
          fedora|centos)
            # 创建RPM包结构（简化版）
            echo "Creating RPM package structure for $DISTRO"
            mkdir -p timenest-rpm/usr/bin
            cp TimeNest-linux-${DISTRO}/TimeNest timenest-rpm/usr/bin/
            tar -czf TimeNest-${VERSION}-linux-${DISTRO}.tar.gz timenest-rpm 2>/dev/null || echo "Warning: tar failed"
            if command -v zip >/dev/null 2>&1; then
              zip TimeNest-${VERSION}-linux-${DISTRO}.rpm.zip TimeNest-${VERSION}-linux-${DISTRO}.tar.gz 2>/dev/null || echo "Warning: zip failed"
            fi
            ;;
            
          arch)
            # 创建Arch包结构
            # 使用here document创建PKGBUILD文件
            cat > PKGBUILD << 'HEREDOCEND'
pkgname=timenest
pkgver=$VERSION
pkgrel=1
pkgdesc="智能课程表桌面应用"
arch=('x86_64')
url="https://github.com/ziyi127/TimeNest"
license=('MIT')
depends=('python' 'python-pyside6')

package() {
    mkdir -p "$pkgdir/usr/bin"
    cp TimeNest-linux-${DISTRO}/TimeNest "$pkgdir/usr/bin/"
    chmod +x "$pkgdir/usr/bin/TimeNest"
}
HEREDOCEND
            
            if command -v tar >/dev/null 2>&1; then
              tar -czf TimeNest-${VERSION}-linux-${DISTRO}.pkg.tar.gz PKGBUILD 2>/dev/null || echo "Warning: tar failed"
            fi
            if command -v zip >/dev/null 2>&1; then
              zip TimeNest-${VERSION}-linux-${DISTRO}.pkg.zip TimeNest-${VERSION}-linux-${DISTRO}.pkg.tar.gz 2>/dev/null || echo "Warning: zip failed"
            fi
            ;;
        esac
        
        # 同时创建通用的便携式包
        tar -czf TimeNest-${VERSION}-linux-${DISTRO}-portable.tar.gz TimeNest-linux-${DISTRO} 2>/dev/null || echo "Warning: tar failed"

    - name: Upload Linux release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          TimeNest-*-${{ matrix.distro }}*.zip
          TimeNest-*-${{ matrix.distro }}*.deb.zip
          TimeNest-*-${{ matrix.distro }}*.rpm.zip
          TimeNest-*-${{ matrix.distro }}*.pkg.zip
          TimeNest-*-${{ matrix.distro }}*.tar.gz
        tag_name: ${{ github.ref_name }}

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install pyinstaller

    - name: Build macOS executable
      run: |
        pyinstaller --onefile --windowed --name TimeNest --icon assets/logo.icns main.py

    - name: Create macOS package
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        ARCH=${{ matrix.arch }}
        
        mkdir -p TimeNest-macos-${ARCH}
        cp -r dist/TimeNest.app TimeNest-macos-${ARCH}/ 2>/dev/null || cp dist/TimeNest TimeNest-macos-${ARCH}/
        cp README.md TimeNest-macos-${ARCH}/ 2>/dev/null || echo "No README.md file"
        cp LICENSE TimeNest-macos-${ARCH}/ 2>/dev/null || echo "No LICENSE file"
        cp start.sh TimeNest-macos-${ARCH}/ 2>/dev/null || echo "No start.sh file"
        
        # 创建ZIP包
        zip -r TimeNest-${VERSION}-macos-${ARCH}.zip TimeNest-macos-${ARCH} 2>/dev/null || echo "Warning: zip failed"

    - name: Upload macOS release asset
      uses: softprops/action-gh-release@v1
      with:
        files: TimeNest-*-*-*.zip
        tag_name: ${{ github.ref_name }}