name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 推送标签时触发发布
  workflow_dispatch:  # 手动触发

env:
  APP_NAME: TimeNest
  ICON_PATH: assets/logo.svg
  REQUIREMENTS: requirements.txt
  PYTHON_VERSION: '3.11'

permissions:
  contents: read  # 最小必要权限

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.REQUIREMENTS }}
        pip install pyinstaller

    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name ${{ env.APP_NAME }} --icon ${{ env.ICON_PATH }} main.py

    - name: Create Windows package
      run: |
        mkdir %TEMP%\${{ env.APP_NAME }}-windows
        copy dist\${{ env.APP_NAME }}.exe %TEMP%\${{ env.APP_NAME }}-windows\
        copy README.md %TEMP%\${{ env.APP_NAME }}-windows\
        copy LICENSE %TEMP%\${{ env.APP_NAME }}-windows\ || echo "LICENSE not found"
        copy start.bat %TEMP%\${{ env.APP_NAME }}-windows\
        copy start.sh %TEMP%\${{ env.APP_NAME }}-windows\
        Compress-Archive -Path %TEMP%\${{ env.APP_NAME }}-windows\* -DestinationPath %TEMP%\${{ env.APP_NAME }}-windows.zip

    - name: Get version
      id: get_version
      run: |
        set VERSION=${{ github.ref_name }}
        set VERSION=%VERSION:~v%
        echo "VERSION=%VERSION%" >> $GITHUB_ENV

    - name: Upload Windows release asset
      uses: softprops/action-gh-release@v1
      with:
        files: %TEMP%\${{ env.APP_NAME }}-windows.zip
        tag_name: ${{ github.ref_name }}

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [ubuntu, debian, fedora, centos, arch]
        arch: [x86_64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.REQUIREMENTS }}
        pip install pyinstaller

    - name: Build Linux executable
      run: |
        pyinstaller --onefile --windowed --name ${{ env.APP_NAME }} main.py

    - name: Create Linux package
      run: |
        DISTRO=${{ matrix.distro }}
        VERSION=$(echo $GITHUB_REF_NAME | cut -d'v' -f2)
        mkdir -p ${APP_NAME}-linux-${DISTRO}
        cp dist/${APP_NAME} ${APP_NAME}-linux-${DISTRO}/
        cp README.md ${APP_NAME}-linux-${DISTRO}/
        cp LICENSE ${APP_NAME}-linux-${DISTRO}/ 2>/dev/null || echo "LICENSE not found"
        cp start.sh ${APP_NAME}-linux-${DISTRO}/

        # 根据发行版创建包
        case $DISTRO in
          ubuntu|debian)
            dpkg-deb --build ${APP_NAME}-linux-${DISTRO} ${APP_NAME}-${VERSION}-linux-${DISTRO}.deb
            zip ${APP_NAME}-${VERSION}-linux-${DISTRO}.deb.zip ${APP_NAME}-${VERSION}-linux-${DISTRO}.deb
            ;;
          fedora|centos)
            tar -czf ${APP_NAME}-${VERSION}-linux-${DISTRO}.tar.gz ${APP_NAME}-linux-${DISTRO}
            zip ${APP_NAME}-${VERSION}-linux-${DISTRO}.rpm.zip ${APP_NAME}-${VERSION}-linux-${DISTRO}.tar.gz
            ;;
          arch)
            cat > PKGBUILD <<EOF
pkgname=${APP_NAME}
pkgver=$VERSION
pkgrel=1
pkgdesc="智能课程表桌面应用"
arch=(x86_64)
url="https://github.com/ziyi127/TimeNest"
license=(MIT)
depends=(python python-pyside6)
package() {
    mkdir -p "\$pkgdir/usr/bin"
    cp ${APP_NAME}-linux-${DISTRO}/${APP_NAME} "\$pkgdir/usr/bin/"
    chmod +x "\$pkgdir/usr/bin/${APP_NAME}"
}
EOF
            zip ${APP_NAME}-${VERSION}-linux-${DISTRO}.pkg.zip PKGBUILD
            ;;
        esac

        # 创建便携式包
        tar -czf ${APP_NAME}-${VERSION}-linux-${DISTRO}-portable.tar.gz ${APP_NAME}-linux-${DISTRO}

    - name: Upload Linux release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${APP_NAME}-*-${{ matrix.distro }}*.zip
          ${APP_NAME}-*-${{ matrix.distro }}*.deb.zip
          ${APP_NAME}-*-${{ matrix.distro }}*.rpm.zip
          ${APP_NAME}-*-${{ matrix.distro }}*.pkg.zip
          ${APP_NAME}-*-${{ matrix.distro }}*.tar.gz
        tag_name: ${{ github.ref_name }}

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.REQUIREMENTS }}
        pip install pyinstaller

    - name: Build macOS executable
      run: |
        pyinstaller --onefile --windowed --name ${{ env.APP_NAME }} --icon ${{ env.ICON_PATH }} main.py

    - name: Create macOS package
      run: |
        VERSION=$(echo $GITHUB_REF_NAME | cut -d'v' -f2)
        ARCH=${{ matrix.arch }}
        mkdir -p ${APP_NAME}-macos-${ARCH}
        cp dist/${APP_NAME} ${APP_NAME}-macos-${ARCH}/
        cp README.md ${APP_NAME}-macos-${ARCH}/
        cp LICENSE ${APP_NAME}-macos-${ARCH}/ 2>/dev/null || echo "LICENSE not found"
        cp start.sh ${APP_NAME}-macos-${ARCH}/
        zip -r ${APP_NAME}-${VERSION}-macos-${ARCH}.zip ${APP_NAME}-macos-${ARCH}

    - name: Upload macOS release assets
      uses: softprops/action-gh-release@v1
      with:
        files: ${APP_NAME}-*-${{ matrix.arch }}.zip
        tag_name: ${{ github.ref_name }}